# A template that creates a Hardware service
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2018 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Hardware service environment"

Parameters:

    Environment:
        Type: "String"
        Description: "The name of the environment"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
        Infrastructure: { Commit: "1bbee7413deba8a5920c91339f0324fa8a631d84" }

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Definition" }
            Parameters:
              - "Environment"

        ParameterLabels:
            Environment: { default: "Environment" }

Resources:

    ##########################################################################################################
    ##  ACCESSORY
    ##########################################################################################################

    CognitoUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: false
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: false
                    RequireNumbers: false
                    RequireSymbols: false
                    RequireUppercase: false
            UserPoolName: { "Fn::Sub": "hardware-${Environment}-accessories" }
            Schema:
              - Name: 'hardware_model'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
              - Name: 'mac_address'
                AttributeDataType: 'String'
                Mutable: false
                Required: false
                StringAttributeConstraints:
                    MinLength: '17'
                    MaxLength: '17'
              - Name: 'firmware_version'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
              - Name: 'settings_key'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
              - Name: 'owner_id'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
              - Name: 'bluetooth_name'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
              - Name: 'memory_level'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
              - Name: 'battery_level'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
              - Name: 'state'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
            UserPoolTags:
              Name: { "Fn::Sub": "hardware-${Environment}-accessories" }
              Management: "managed"
              Project: "hardware"
              Environment: { Ref: "Environment" }
              Service: "accessory"
        DeletionPolicy : "Retain"

    CognitoUserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            ClientName: { "Fn::Sub": "hardware-${Environment}-login" }
            ExplicitAuthFlows:
              - "ADMIN_NO_SRP_AUTH"
            GenerateSecret: false
            ReadAttributes:
              - "custom:battery_level"
              - "custom:bluetooth_name"
              - "custom:firmware_version"
              - "custom:hardware_model"
              - "custom:mac_address"
              - "custom:memory_level"
              - "custom:owner_id"
              - "custom:settings_key"
            RefreshTokenValidity: 30
            UserPoolId: { Ref: "CognitoUserPool" }

    AccessorySyncLogTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: { "Fn::Sub": "hardware-${Environment}-accessorysynclog" }
            AttributeDefinitions:
              - { AttributeName: "accessory_mac_address", AttributeType: "S" }
              - { AttributeName: "event_date", AttributeType: "S" }
            KeySchema:
              - { AttributeName: "accessory_mac_address", KeyType: "HASH" }
              - { AttributeName: "event_date", KeyType: "RANGE" }
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    ##########################################################################################################
    ##  FIRMWARE
    ##########################################################################################################

    FirmwareS3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: { "Fn::Sub": "biometrix-hardware-${Environment}-${AWS::Region}" }
            Tags:
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "hardware" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "firmware" }
        # Don't delete this if we accidentally delete the stack (which would fail anyway unless the bucket is empty)
        DeletionPolicy : "Retain"

    FirmwareTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: { "Fn::Sub": "hardware-${Environment}-firmware" }
            AttributeDefinitions:
              - { AttributeName: "device_type", AttributeType: "S" }
              - { AttributeName: "version", AttributeType: "S" }
            KeySchema:
              - { AttributeName: "device_type", KeyType: "HASH" }
              - { AttributeName: "version", KeyType: "RANGE" }
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
        DeletionPolicy : "Retain"

    ##########################################################################################################
    ##  AUTHENTICATION
    ##########################################################################################################

    CustomAuthLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            RoleName: { "Fn::Sub": "hardware-${Environment}-apigateway-authenticate-${AWS::Region}" }

    ValidateAuthLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::Sub": "biometrix-infrastructure-${AWS::Region}" }
                S3Key: { "Fn::Sub": [ "lambdas/hardware/${TemplateVersion}/custom_auth.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    ENVIRONMENT: { Ref: 'Environment' }
            Handler: "custom_auth.validate_handler"
            Runtime: "python3.6"
            Timeout: "10"
            Role: { "Fn::GetAtt" : [ "CustomAuthLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "hardware-${Environment}-apigateway-validateauth" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "hardware-${Environment}-apigateway-validateauth" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "hardware" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }

    ValidateAuthExecutionPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "Allows entities to call the Lambda function to validate authentication tokens"
            ManagedPolicyName: { "Fn::Sub": "hardware-${Environment}-validateauth" }
            Path: "/"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Action:
                      - "lambda:InvokeFunction"
                    Effect: "Allow"
                    Resource: { "Fn::GetAtt": [ "ValidateAuthLambda", "Arn" ] }

    ##########################################################################################################
    ##  API GATEWAY
    ##########################################################################################################

    ApiGatewayLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
              - { "Fn::ImportValue": { "Fn::Sub": "QuerypostgresPolicyArn-${Environment}" } }
              - { "Fn::ImportValue": { "Fn::Sub": "UsersValidateAuthPolicyArn-${Environment}" } }
              - { Ref: "ValidateAuthExecutionPolicy" }
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "cognito-idp:AdminCreateUser"
                          - "cognito-idp:AdminDeleteUserAttributes"
                          - "cognito-idp:AdminGetUser"
                          - "cognito-idp:AdminInitiateAuth"
                          - "cognito-idp:AdminRespondToAuthChallenge"
                          - "cognito-idp:AdminUpdateUserAttributes"
                        Effect: "Allow"
                        Resource: { "Fn::GetAtt": [ "CognitoUserPool", "Arn" ] }

                      - Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::GetAtt": [ "FirmwareTable", "Arn" ] }
                          - { "Fn::GetAtt": [ "AccessorySyncLogTable", "Arn" ] }

                      - Action:
                          - "s3:GetObject"
                          - "s3:ListBucket"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::GetAtt": [ "FirmwareS3Bucket", "Arn" ] }
                          - { "Fn::Sub": "${FirmwareS3Bucket.Arn}/*" }
            RoleName: { "Fn::Sub": "hardware-${Environment}-apigateway-${AWS::Region}" }

    ApiGatewayLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::ImportValue": "InfrastructureBucketName" }
                S3Key: { "Fn::Sub": [ "lambdas/hardware/${TemplateVersion}/apigateway.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    COGNITO_USER_POOL_ID: { Ref: "CognitoUserPool" }
                    COGNITO_USER_POOL_CLIENT_ID: { Ref: "CognitoUserPoolClient" }
                    SERVICE: 'hardware'
                    ENVIRONMENT: { Ref: 'Environment' }
                    AWS_ACCOUNT_ID: { Ref: "AWS::AccountId" }
                    DYNAMODB_FIRMWARE_TABLE_NAME: { Ref: "FirmwareTable" }
                    DYNAMODB_ACCESSORYSYNCLOG_TABLE_NAME: { Ref: "AccessorySyncLogTable" }
                    S3_FIRMWARE_BUCKET_NAME: { Ref: "FirmwareS3Bucket" }
            Handler: "apigateway.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "hardware-${Environment}-apigateway-execute" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "hardware-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "hardware" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"

#    ApigatewayStack:
#        Type: "AWS::CloudFormation::Stack"
#        Properties:
#            Parameters:
#                Project: "hardware"
#                Environment: { Ref: "Environment" }
#                Service: "apigateway"
#                LambdaArn: { "Fn::GetAtt": [ "ApiGatewayLambda", "Arn" ] }
#            Tags:
#              - { Key: "Name", Value: { "Fn::Sub": "hardware-${Environment}-apigateway" } }
#              - { Key: "Management", Value: "managed" }
#              - { Key: "Project", Value: "hardware" }
#              - { Key: "Environment", Value: { Ref: "Environment" } }
#              - { Key: "Service", Value: "apigateway" }
#            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure/${TemplateVersion}/apigateway.yaml", {
#                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
#                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
#            } ] }
#            TimeoutInMinutes: 30

    ##########################################################################################################
    ##  OUTPUTS
    ##########################################################################################################

Outputs:

    ValidateAuthPolicyArn:
        Description: "The ARN of the validateauth IAM Policy"
        Value: { Ref: "ValidateAuthExecutionPolicy" }
        Export:
            Name: { "Fn::Sub": "HardwareValidateAuthPolicyArn-${Environment}" }
